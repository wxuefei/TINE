; Push arguments as normal
GLOBAL FFI_CALL_TOS_0
FFI_CALL_TOS_0:
PUSH RBP
MOV RBP,RSP;save current stack
PUSH RBX
PUSH R12
PUSH R13
PUSH R14
PUSH R15
CALL RDI;1st arg
POP R15
POP R14
POP R13
POP R12
POP RBX
LEAVE
RET


GLOBAL FFI_CALL_TOS_1
FFI_CALL_TOS_1:
PUSH RBP
MOV RBP,RSP
PUSH RBX
PUSH R12
PUSH R13
PUSH R14
PUSH R15
PUSH RSI;2nd arg
CALL RDI
POP R15
POP R14
POP R13
POP R12
POP RBX
LEAVE
RET

GLOBAL FFI_CALL_TOS_2
FFI_CALL_TOS_2:
PUSH RBP
MOV RBP,RSP
PUSH RBX
PUSH R12
PUSH R13 
PUSH R14
PUSH R15
PUSH RDX
PUSH RSI
CALL RDI
POP R15
POP R14
POP R13
POP R12
POP RBX
LEAVE
RET

GLOBAL FFI_CALL_TOS_3
FFI_CALL_TOS_3:
PUSH RBP
MOV RBP,RSP
PUSH RBX
PUSH R12
PUSH R13
PUSH R14
PUSH R15
PUSH RCX
PUSH RDX
PUSH RSI
CALL RDI
POP R15
POP R14
POP R13
POP R12
POP RBX
LEAVE
RET

GLOBAL FFI_CALL_TOS_4
FFI_CALL_TOS_4:
PUSH RBP
MOV RBP,RSP
PUSH RBX
PUSH R12
PUSH R13
PUSH R14
PUSH R15
PUSH R8
PUSH RCX
PUSH RDX
PUSH RSI
CALL RDI
POP R15
POP R14
POP R13
POP R12
POP RBX
LEAVE
RET

GLOBAL FFI_CALL_TOS_5
FFI_CALL_TOS_5:
PUSH RBP
MOV RBP, RSP
PUSH RBX
PUSH R12
PUSH R13
PUSH R14
PUSH R15
PUSH R9
PUSH R8
PUSH RCX
PUSH RDX
PUSH RSI
CALL RDI
POP R15
POP R14
POP R13
POP R12
POP RBX
LEAVE
RET

GLOBAL FFI_CALL_TOS_6
FFI_CALL_TOS_6:
PUSH RBP
MOV RBP, RSP
PUSH RBX
PUSH R12
PUSH R13
PUSH R14
PUSH R15
PUSH QWORD [RBP + 16]
PUSH R9
PUSH R8
PUSH RCX
PUSH RDX
PUSH RSI
CALL RDI
POP R15
POP R14
POP R13
POP R12
POP RSI
POP RDI
POP RBX
LEAVE
RET

GLOBAL FFI_CALL_TOS_7
FFI_CALL_TOS_7:
PUSH RBP
MOV RBP, RSP
PUSH RBX
PUSH R12
PUSH R13
PUSH R14
PUSH R15
PUSH QWORD [RBP + 0x18]
PUSH QWORD [RBP + 0x10]
PUSH R9
PUSH R8
PUSH RCX
PUSH RDX
PUSH RSI
CALL RDI
POP R15
POP R14
POP R13
POP R12
POP RBX
LEAVE
RET

GLOBAL FFI_CALL_TOS_8
FFI_CALL_TOS_8:
PUSH RBP
MOV RBP, RSP
PUSH RBX
PUSH R12
PUSH R13
PUSH R14
PUSH R15
PUSH QWORD [RBP + 0x20]
PUSH QWORD [RBP + 0x18]
PUSH QWORD [RBP + 0x10]
PUSH R9
PUSH R8
PUSH RCX
PUSH RDX
PUSH RSI
CALL RDI
POP R15
POP R14
POP R13
POP R12
POP RBX
LEAVE
RET

GLOBAL FFI_CALL_TOS_0_ZERO_BP
FFI_CALL_TOS_0_ZERO_BP:
PUSH RBP
PUSH RBX
PUSH R12
PUSH R13
PUSH R14
PUSH R15
PUSH 0 ;fake return address so the stack trace deliberately ends here(doesn't matter since it'll be reset to normal after the function returns and rbp is popped)
PUSH 0 ;make it look like it was called from null
MOV RBP,RSP 
CALL RDI
ADD RSP,0x10
POP R15
POP R14
POP R13
POP R12
POP RBX
POP RBP ; no need to leave because rbp == rsp(__cdecl)
RET
